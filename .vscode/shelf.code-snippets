{
	// Place your egghead-challenge-rey-snippets workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }	
	"AJAX method" : {
		"prefix" : "ajax",
		"body" :[
			"$.ajax({",
			"url : '${1}',",
			"method : '${2}',",
			"dataType : 'json',",
			"succes : function(data){",
			"\t$3",
			"}",
			"});$0"
		],
		"description": "ajax method"
	},

	"Javascript function Syntax" : {
		"prefix" : ["func","fun"],
		"body": [
			"function name($1){",
			"\t$2",
			"}$0"
		],
		"description": "Creates a Function in javascript"
	},

	"Javascript While Loop" : {
		"prefix" :["while"],
		"body": [
			"while($1){",
			"\t$2",
			"}$0"
		],
		"description": "Creates a while loop"
	},

	"Javascript Do While Loop" : {
		"prefix" :["do","dow"],
		"body": [
			"do{",
			"\t$1",
			"}",
			"while($2);$0"
		],
		"description": "Creates a do while loop"
	},

	"JS Error Handling" : {
		"prefix" :["try","tcf","tryfinally"],
		"body": [
			"try {",
			"\t$1",
			"}",
			"catch (err){",
			"\t$2",
			"}",
			"finally {",
			"\t$3",
			"}$0"
		],
		"description": "Creates try catch statement"
	},

	"Express js HTTP Get Request": {
		"prefix": "app.get",
		"body": [
		  "app.get('${2:path}', (req,res) => {",
		  "  \t$1",
		  "   });$0"
		],
		"description": "Get Method"
	  },

	  "Sample User Object Constructor": {
		"prefix": ["newcon","object"],
		"body": [
			"function User(${1:para1},${2:para2}){",
			"  this.firstName = ${1:para1};",
			"  this.lastName = ${2:para2};",
			"}$0"
		],
		"description": "constructor function"
	  },

	  "jQuery ready() Method": {
		"prefix": ["doc","ready"],
		"body": [
			"$(document).ready(function(){",
			"$1",
			"});$0"
		],
		"description": "use ready() to make a function available after the document is loaded"
	  },

	  "jQuery call back function": {
		"prefix": ["jqcall","jqcallback"],
		"body": [
			"$('${1:selector}').click(function(){",
			" $('${2:selector}').methdod('$3',function(){", 
			"   $4",
			" });",
			"});$0"
		],
		"description": "jQuery callback function is executed after the current effect is finished."
	  },

	  "jQuery get method": {
		"prefix": ["jqget","$.get"],
		"body": [
			"$.get('${1:path}',function(data,status){",
			"  $2",
			"});$0"
		],
		"description": "The $.get() method requests data from the server with an HTTP GET request."
	  },

	  "jQuery post method": {
		"prefix": ["jqpost","$.post"],
		"body": [
			"$.post('${1:path}',{",
			"  $2",
			"},",
			"function(data,status){",
			"  $3",
			"});$0"
		],
		"description": "The $.post() method is called to send some data along with the request"
	  },

}
